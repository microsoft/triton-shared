"builtin.module"() ({
  "tt.func"() <{function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32, i32) -> (), sym_name = "nested2_complex_body", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: i32, %arg3: i32):
    %0 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %1 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %2 = "arith.constant"() <{value = 1 : i32}> : () -> i32
    %3 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %4 = "arith.constant"() <{value = dense<3> : tensor<2x2xi32>}> : () -> tensor<2x2xi32>
    %5 = "arith.constant"() <{value = dense<1> : tensor<2x2xi32>}> : () -> tensor<2x2xi32>
    %6 = "arith.constant"() <{value = 2 : i32}> : () -> i32
    %7 = "tt.make_range"() <{end = 2 : i32, start = 0 : i32}> : () -> tensor<2xi32>
    %8 = "tt.expand_dims"(%7) <{axis = 1 : i32}> : (tensor<2xi32>) -> tensor<2x1xi32>
    %9 = "tt.splat"(%arg2) : (i32) -> tensor<2x1xi32>
    %10 = "arith.muli"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1xi32>
    %11 = "tt.expand_dims"(%7) <{axis = 0 : i32}> : (tensor<2xi32>) -> tensor<1x2xi32>
    %12 = "tt.splat"(%arg3) : (i32) -> tensor<1x2xi32>
    %13 = "arith.muli"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1x2xi32>, tensor<1x2xi32>) -> tensor<1x2xi32>
    %14 = "tt.broadcast"(%10) : (tensor<2x1xi32>) -> tensor<2x2xi32>
    %15 = "tt.broadcast"(%13) : (tensor<1x2xi32>) -> tensor<2x2xi32>
    %16 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
    %17 = "tt.splat"(%1) : (i32) -> tensor<2x2x!tt.ptr<f32>>
    %18 = "tt.addptr"(%17, %16) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
    %19 = "tt.splat"(%0) : (i32) -> tensor<2x1x!tt.ptr<f32>>
    %20 = "tt.addptr"(%19, %10) : (tensor<2x1x!tt.ptr<f32>>, tensor<2x1xi32>) -> tensor<2x1x!tt.ptr<f32>>
    %21 = "tt.broadcast"(%20) : (tensor<2x1x!tt.ptr<f32>>) -> tensor<2x2x!tt.ptr<f32>>
    %22 = "tt.addptr"(%21, %15) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
    %23 = "arith.muli"(%arg2, %6) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
    %24 = "tt.splat"(%23) : (i32) -> tensor<2x2xi32>
    %25:2 = "scf.for"(%3, %6, %2, %18, %22) ({
    ^bb0(%arg4: i32, %arg5: tensor<2x2x!tt.ptr<f32>>, %arg6: tensor<2x2x!tt.ptr<f32>>):
      %26 = "tt.addptr"(%arg5, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %27 = "tt.addptr"(%arg6, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %28:2 = "scf.for"(%3, %6, %2, %26, %27) ({
      ^bb0(%arg7: i32, %arg8: tensor<2x2x!tt.ptr<f32>>, %arg9: tensor<2x2x!tt.ptr<f32>>):
        %33 = "tt.load"(%arg8) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 0, 0>}> : (tensor<2x2x!tt.ptr<f32>>) -> tensor<2x2xf32>
        "tt.store"(%arg9, %33) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xf32>) -> ()
        %34 = "tt.addptr"(%arg8, %4) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        %35 = "tt.addptr"(%arg9, %4) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        "scf.yield"(%34, %35) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
      }) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>)
      %29 = "tt.addptr"(%arg5, %24) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %30 = "tt.addptr"(%29, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %31 = "tt.addptr"(%arg6, %24) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %32 = "tt.addptr"(%31, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      "scf.yield"(%30, %32) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
    }) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>)
    "tt.return"() : () -> ()
  }) {noinline = false} : () -> ()
}) : () -> ()
%1 = "arith.constant"() <{value = 0 : i32}> : () -> i32
%17 = "tt.splat"(%1) : (i32) -> tensor<2x2xi32>
%0 = "arith.constant"() <{value = 0 : i32}> : () -> i32
%19 = "tt.splat"(%0) : (i32) -> tensor<2x1xi32>
%17 = "tt.splat"(%1) : (i32) -> tensor<2x2xi32>
~~~
accumulate
%18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
%19 = "tt.addptr"(%17, %16) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
%20 = "tt.splat"(%0) : (i32) -> tensor<2x1xi32>
~~~
accumulate
%21 = "arith.addi"(%20, %10) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1xi32>
%22 = "tt.addptr"(%20, %10) : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1x!tt.ptr<f32>>
~~~
%19 = "tt.addptr"(%17, %16) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
arg number: 3
init arg size
2
num region iter-args
2
dump from that index
iter arg
init arg
%19 = "tt.addptr"(%17, %16) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
%24 = "tt.addptr"(%23, %15) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
%22 = "tt.addptr"(%20, %10) : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1x!tt.ptr<f32>>
%23 = "tt.broadcast"(%22) : (tensor<2x1x!tt.ptr<f32>>) -> tensor<2x2xi32>
<block argument> of type 'tensor<2x2xi32>' at index: 1
~~~
accumulate
%31 = "arith.addi"(%arg5, %26) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
%32 = "tt.addptr"(%arg5, %26) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
~~~
accumulate
%28 = "arith.addi"(%arg5, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
%29 = "tt.addptr"(%arg5, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
%27:2 = "scf.for"(%3, %6, %2, %19, %24) ({
^bb0(%arg4: i32, %arg5: tensor<2x2xi32>, %arg6: tensor<2x2x!tt.ptr<f32>>):
  %28 = "arith.addi"(%arg5, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %29 = "tt.addptr"(%arg5, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %30 = "tt.addptr"(%arg6, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %31:2 = "scf.for"(%3, %6, %2, %29, %30) ({
  ^bb0(%arg7: i32, %arg8: tensor<2x2x!tt.ptr<f32>>, %arg9: tensor<2x2x!tt.ptr<f32>>):
    %37 = "tt.load"(%arg8) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 0, 0>}> : (tensor<2x2x!tt.ptr<f32>>) -> tensor<2x2xf32>
    "tt.store"(%arg9, %37) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xf32>) -> ()
    %38 = "tt.addptr"(%arg8, %4) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
    %39 = "tt.addptr"(%arg9, %4) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
    "scf.yield"(%38, %39) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
  }) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>)
  %32 = "arith.addi"(%arg5, %26) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %33 = "tt.addptr"(%arg5, %26) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %34 = "tt.addptr"(%33, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %35 = "tt.addptr"(%arg6, %26) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %36 = "tt.addptr"(%35, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  "scf.yield"(%34, %36) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
}) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2xi32>, tensor<2x2x!tt.ptr<f32>>)
%23 = "tt.broadcast"(%22) : (tensor<2x1x!tt.ptr<f32>>) -> tensor<2x2xi32>
~~~
accumulate
%24 = "arith.addi"(%23, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
%25 = "tt.addptr"(%23, %15) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
%34 = "tt.addptr"(%arg5, %27) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
accumulate
%35 = "arith.addi"(%34, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2xi32>
%36 = "tt.addptr"(%34, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
%30 = "tt.addptr"(%arg5, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
arg number: 3
init arg size
2
num region iter-args
2
dump from that index
iter arg
init arg
%30 = "tt.addptr"(%arg5, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
%31 = "tt.addptr"(%arg6, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
%25 = "tt.addptr"(%23, %15) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
arg number: 4
init arg size
2
num region iter-args
2
dump from that index
iter arg
init arg
%19 = "tt.addptr"(%17, %16) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
%25 = "tt.addptr"(%23, %15) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
%36 = "tt.addptr"(%34, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
++++++++++++++
yield op
"scf.yield"(%36, %38) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
val index: 0
%36 = "tt.addptr"(%34, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
++++++++++++++
<block argument> of type 'tensor<2x2xi32>' at index: 1
~~~
accumulate
%40 = "arith.addi"(%arg8, %4) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
%41 = "tt.addptr"(%arg8, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
tensor<2x2x!tt.ptr<f32>>
%32:2 = "scf.for"(%3, %6, %2, %30, %31) ({
^bb0(%arg7: i32, %arg8: tensor<2x2xi32>, %arg9: tensor<2x2x!tt.ptr<f32>>):
  %39 = "tts.create_ptr"(%arg0, %arg8) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %40 = "tt.load"(%39) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 0, 0>}> : (tensor<2x2x!tt.ptr<f32>>) -> tensor<2x2xf32>
  "tt.store"(%arg9, %40) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xf32>) -> ()
  %41 = "arith.addi"(%arg8, %4) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %42 = "tt.addptr"(%arg8, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %43 = "tt.addptr"(%arg9, %4) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  "scf.yield"(%42, %43) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
}) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2xi32>, tensor<2x2x!tt.ptr<f32>>)
<block argument> of type 'tensor<2x2xi32>' at index: 2
~~~
accumulate
%37 = "arith.addi"(%arg6, %27) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
%38 = "tt.addptr"(%arg6, %27) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
~~~
accumulate
%31 = "arith.addi"(%arg6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
%32 = "tt.addptr"(%arg6, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
%28:2 = "scf.for"(%3, %6, %2, %19, %25) ({
^bb0(%arg4: i32, %arg5: tensor<2x2xi32>, %arg6: tensor<2x2xi32>):
  %29 = "arith.addi"(%arg5, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %30 = "tt.addptr"(%arg5, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %31 = "arith.addi"(%arg6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %32 = "tt.addptr"(%arg6, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %33:2 = "scf.for"(%3, %6, %2, %30, %32) ({
  ^bb0(%arg7: i32, %arg8: tensor<2x2xi32>, %arg9: tensor<2x2x!tt.ptr<f32>>):
    %41 = "tts.create_ptr"(%arg0, %arg8) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
    %42 = "tt.load"(%41) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 0, 0>}> : (tensor<2x2x!tt.ptr<f32>>) -> tensor<2x2xf32>
    "tt.store"(%arg9, %42) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xf32>) -> ()
    %43 = "arith.addi"(%arg8, %4) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
    %44 = "tt.addptr"(%arg8, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
    %45 = "tt.addptr"(%arg9, %4) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
    "scf.yield"(%44, %45) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
  }) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2xi32>, tensor<2x2x!tt.ptr<f32>>)
  %34 = "arith.addi"(%arg5, %27) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %35 = "tt.addptr"(%arg5, %27) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %36 = "arith.addi"(%35, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %37 = "tt.addptr"(%35, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %38 = "arith.addi"(%arg6, %27) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %39 = "tt.addptr"(%arg6, %27) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %40 = "tt.addptr"(%39, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  "scf.yield"(%37, %40) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
}) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2xi32>, tensor<2x2xi32>)
%44 = "tt.addptr"(%arg8, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
++++++++++++++
yield op
"scf.yield"(%44, %45) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
val index: 0
%44 = "tt.addptr"(%arg8, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
++++++++++++++
%39 = "tt.addptr"(%arg6, %27) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
accumulate
%40 = "arith.addi"(%39, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2xi32>
%41 = "tt.addptr"(%39, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
%32 = "tt.addptr"(%arg6, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
arg number: 4
init arg size
2
num region iter-args
2
dump from that index
iter arg
init arg
%30 = "tt.addptr"(%arg5, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
%32 = "tt.addptr"(%arg6, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
%41 = "tt.addptr"(%39, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
++++++++++++++
yield op
"scf.yield"(%37, %41) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
val index: 1
%41 = "tt.addptr"(%39, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
++++++++++++++
<block argument> of type 'tensor<2x2xi32>' at index: 2
~~~
accumulate
%46 = "arith.addi"(%arg9, %4) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
%47 = "tt.addptr"(%arg9, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
~~~
tensor<2x2x!tt.ptr<f32>>
%33:2 = "scf.for"(%3, %6, %2, %30, %32) ({
^bb0(%arg7: i32, %arg8: tensor<2x2xi32>, %arg9: tensor<2x2xi32>):
  %42 = "tts.create_ptr"(%arg0, %arg8) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %43 = "tt.load"(%42) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 0, 0>}> : (tensor<2x2x!tt.ptr<f32>>) -> tensor<2x2xf32>
  %44 = "tts.create_ptr"(%arg1, %arg9) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  "tt.store"(%44, %43) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xf32>) -> ()
  %45 = "arith.addi"(%arg8, %4) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %46 = "tt.addptr"(%arg8, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  %47 = "arith.addi"(%arg9, %4) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
  %48 = "tt.addptr"(%arg9, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
  "scf.yield"(%46, %48) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
}) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2xi32>, tensor<2x2xi32>)
%48 = "tt.addptr"(%arg9, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
++++++++++++++
yield op
"scf.yield"(%46, %48) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
val index: 1
%48 = "tt.addptr"(%arg9, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
++++++++++++++
"builtin.module"() ({
  "tt.func"() <{function_type = (!tt.ptr<f32>, !tt.ptr<f32>, i32, i32) -> (), sym_name = "nested2_complex_body", sym_visibility = "public"}> ({
  ^bb0(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: i32, %arg3: i32):
    %0 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %1 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %2 = "arith.constant"() <{value = 1 : i32}> : () -> i32
    %3 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %4 = "arith.constant"() <{value = dense<3> : tensor<2x2xi32>}> : () -> tensor<2x2xi32>
    %5 = "arith.constant"() <{value = dense<1> : tensor<2x2xi32>}> : () -> tensor<2x2xi32>
    %6 = "arith.constant"() <{value = 2 : i32}> : () -> i32
    %7 = "tt.make_range"() <{end = 2 : i32, start = 0 : i32}> : () -> tensor<2xi32>
    %8 = "tt.expand_dims"(%7) <{axis = 1 : i32}> : (tensor<2xi32>) -> tensor<2x1xi32>
    %9 = "tt.splat"(%arg2) : (i32) -> tensor<2x1xi32>
    %10 = "arith.muli"(%8, %9) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1xi32>
    %11 = "tt.expand_dims"(%7) <{axis = 0 : i32}> : (tensor<2xi32>) -> tensor<1x2xi32>
    %12 = "tt.splat"(%arg3) : (i32) -> tensor<1x2xi32>
    %13 = "arith.muli"(%11, %12) <{overflowFlags = #arith.overflow<none>}> : (tensor<1x2xi32>, tensor<1x2xi32>) -> tensor<1x2xi32>
    %14 = "tt.broadcast"(%10) : (tensor<2x1xi32>) -> tensor<2x2xi32>
    %15 = "tt.broadcast"(%13) : (tensor<1x2xi32>) -> tensor<2x2xi32>
    %16 = "arith.addi"(%14, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
    %17 = "tt.splat"(%1) : (i32) -> tensor<2x2xi32>
    %18 = "arith.addi"(%17, %16) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
    %19 = "tt.addptr"(%17, %16) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
    %20 = "tt.splat"(%0) : (i32) -> tensor<2x1xi32>
    %21 = "arith.addi"(%20, %10) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1xi32>
    %22 = "tt.addptr"(%20, %10) : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1x!tt.ptr<f32>>
    %23 = "tt.broadcast"(%22) : (tensor<2x1x!tt.ptr<f32>>) -> tensor<2x2xi32>
    %24 = "arith.addi"(%23, %15) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
    %25 = "tt.addptr"(%23, %15) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
    %26 = "arith.muli"(%arg2, %6) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32
    %27 = "tt.splat"(%26) : (i32) -> tensor<2x2xi32>
    %28:2 = "scf.for"(%3, %6, %2, %19, %25) ({
    ^bb0(%arg4: i32, %arg5: tensor<2x2xi32>, %arg6: tensor<2x2xi32>):
      %29 = "arith.addi"(%arg5, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
      %30 = "tt.addptr"(%arg5, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %31 = "arith.addi"(%arg6, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
      %32 = "tt.addptr"(%arg6, %5) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %33:2 = "scf.for"(%3, %6, %2, %30, %32) ({
      ^bb0(%arg7: i32, %arg8: tensor<2x2xi32>, %arg9: tensor<2x2xi32>):
        %42 = "tts.create_ptr"(%arg0, %arg8) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        %43 = "tt.load"(%42) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 0, 0>}> : (tensor<2x2x!tt.ptr<f32>>) -> tensor<2x2xf32>
        %44 = "tts.create_ptr"(%arg1, %arg9) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        "tt.store"(%44, %43) <{boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xf32>) -> ()
        %45 = "arith.addi"(%arg8, %4) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
        %46 = "tt.addptr"(%arg8, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        %47 = "arith.addi"(%arg9, %4) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
        %48 = "tt.addptr"(%arg9, %4) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        "scf.yield"(%46, %48) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
      }) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2xi32>, tensor<2x2xi32>)
      %34 = "arith.addi"(%arg5, %27) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
      %35 = "tt.addptr"(%arg5, %27) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %36 = "arith.addi"(%35, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2xi32>
      %37 = "tt.addptr"(%35, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %38 = "arith.addi"(%arg6, %27) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>
      %39 = "tt.addptr"(%arg6, %27) : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      %40 = "arith.addi"(%39, %5) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2xi32>
      %41 = "tt.addptr"(%39, %5) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
      "scf.yield"(%37, %41) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> ()
    }) : (i32, i32, i32, tensor<2x2x!tt.ptr<f32>>, tensor<2x2x!tt.ptr<f32>>) -> (tensor<2x2xi32>, tensor<2x2xi32>)
    "tt.return"() : () -> ()
  }) {noinline = false} : () -> ()
}) : () -> ()
module {
  tt.func public @nested2_complex_body(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: i32, %arg3: i32) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %cst = arith.constant dense<3> : tensor<2x2xi32>
    %cst_2 = arith.constant dense<1> : tensor<2x2xi32>
    %c2_i32 = arith.constant 2 : i32
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32>
    %2 = tt.splat %arg2 : i32 -> tensor<2x1xi32>
    %3 = arith.muli %1, %2 : tensor<2x1xi32>
    %4 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32>
    %5 = tt.splat %arg3 : i32 -> tensor<1x2xi32>
    %6 = arith.muli %4, %5 : tensor<1x2xi32>
    %7 = tt.broadcast %3 : tensor<2x1xi32> -> tensor<2x2xi32>
    %8 = tt.broadcast %6 : tensor<1x2xi32> -> tensor<2x2xi32>
    %9 = arith.addi %7, %8 : tensor<2x2xi32>
    %10 = tt.splat %c0_i32_0 : i32 -> tensor<2x2xi32>
    %11 = arith.addi %10, %9 : tensor<2x2xi32>
    %12 = tt.splat %c0_i32 : i32 -> tensor<2x1xi32>
    %13 = arith.addi %12, %3 : tensor<2x1xi32>
    %14 = tt.broadcast %13 : tensor<2x1xi32> -> tensor<2x2xi32>
    %15 = arith.addi %14, %8 : tensor<2x2xi32>
    %16 = arith.muli %arg2, %c2_i32 : i32
    %17 = tt.splat %16 : i32 -> tensor<2x2xi32>
    %18:2 = scf.for %arg4 = %c0_i32_1 to %c2_i32 step %c1_i32 iter_args(%arg5 = %11, %arg6 = %15) -> (tensor<2x2xi32>, tensor<2x2xi32>)  : i32 {
      %19 = arith.addi %arg5, %cst_2 : tensor<2x2xi32>
      %20 = arith.addi %arg6, %cst_2 : tensor<2x2xi32>
      %21:2 = scf.for %arg7 = %c0_i32_1 to %c2_i32 step %c1_i32 iter_args(%arg8 = %19, %arg9 = %20) -> (tensor<2x2xi32>, tensor<2x2xi32>)  : i32 {
        %26 = "tts.create_ptr"(%arg0, %arg8) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        %27 = tt.load %26 : tensor<2x2x!tt.ptr<f32>>
        %28 = "tts.create_ptr"(%arg1, %arg9) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        tt.store %28, %27 : tensor<2x2x!tt.ptr<f32>>
        %29 = arith.addi %arg8, %cst : tensor<2x2xi32>
        %30 = arith.addi %arg9, %cst : tensor<2x2xi32>
        scf.yield %29, %30 : tensor<2x2xi32>, tensor<2x2xi32>
      }
      %22 = arith.addi %arg5, %17 : tensor<2x2xi32>
      %23 = arith.addi %22, %cst_2 : tensor<2x2xi32>
      %24 = arith.addi %arg6, %17 : tensor<2x2xi32>
      %25 = arith.addi %24, %cst_2 : tensor<2x2xi32>
      scf.yield %23, %25 : tensor<2x2xi32>, tensor<2x2xi32>
    }
    tt.return
  }
}
module {
  tt.func public @nested2_complex_body(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: i32, %arg3: i32) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %cst = arith.constant dense<3> : tensor<2x2xi32>
    %cst_2 = arith.constant dense<1> : tensor<2x2xi32>
    %c2_i32 = arith.constant 2 : i32
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32>
    %2 = tt.splat %arg2 : i32 -> tensor<2x1xi32>
    %3 = arith.muli %1, %2 : tensor<2x1xi32>
    %4 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32>
    %5 = tt.splat %arg3 : i32 -> tensor<1x2xi32>
    %6 = arith.muli %4, %5 : tensor<1x2xi32>
    %7 = tt.broadcast %3 : tensor<2x1xi32> -> tensor<2x2xi32>
    %8 = tt.broadcast %6 : tensor<1x2xi32> -> tensor<2x2xi32>
    %9 = arith.addi %7, %8 : tensor<2x2xi32>
    %10 = tt.splat %c0_i32_0 : i32 -> tensor<2x2xi32>
    %11 = arith.addi %10, %9 : tensor<2x2xi32>
    %12 = tt.splat %c0_i32 : i32 -> tensor<2x1xi32>
    %13 = arith.addi %12, %3 : tensor<2x1xi32>
    %14 = tt.broadcast %13 : tensor<2x1xi32> -> tensor<2x2xi32>
    %15 = arith.addi %14, %8 : tensor<2x2xi32>
    %16 = arith.muli %arg2, %c2_i32 : i32
    %17 = tt.splat %16 : i32 -> tensor<2x2xi32>
    %18:2 = scf.for %arg4 = %c0_i32_1 to %c2_i32 step %c1_i32 iter_args(%arg5 = %11, %arg6 = %15) -> (tensor<2x2xi32>, tensor<2x2xi32>)  : i32 {
      %19 = arith.addi %arg5, %cst_2 : tensor<2x2xi32>
      %20 = arith.addi %arg6, %cst_2 : tensor<2x2xi32>
      %21:2 = scf.for %arg7 = %c0_i32_1 to %c2_i32 step %c1_i32 iter_args(%arg8 = %19, %arg9 = %20) -> (tensor<2x2xi32>, tensor<2x2xi32>)  : i32 {
        %26 = "tts.create_ptr"(%arg0, %arg8) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        %27 = tt.load %26 : tensor<2x2x!tt.ptr<f32>>
        %28 = "tts.create_ptr"(%arg1, %arg9) : (!tt.ptr<f32>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>
        tt.store %28, %27 : tensor<2x2x!tt.ptr<f32>>
        %29 = arith.addi %arg8, %cst : tensor<2x2xi32>
        %30 = arith.addi %arg9, %cst : tensor<2x2xi32>
        scf.yield %29, %30 : tensor<2x2xi32>, tensor<2x2xi32>
      }
      %22 = arith.addi %arg5, %17 : tensor<2x2xi32>
      %23 = arith.addi %22, %cst_2 : tensor<2x2xi32>
      %24 = arith.addi %arg6, %17 : tensor<2x2xi32>
      %25 = arith.addi %24, %cst_2 : tensor<2x2xi32>
      scf.yield %23, %25 : tensor<2x2xi32>, tensor<2x2xi32>
    }
    tt.return
  }
}

