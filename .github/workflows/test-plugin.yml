name: Triton-Shared Plugin Testing

on:
  workflow_call:
    inputs:
      triton-ref:
        required: true
        type: string
      triton-shared-ref:
        required: true
        type: string
      force-failure:
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      triton-ref:
        required: true
        type: string
      triton-shared-ref:
        required: true
        type: string
      force-failure:
        default: false
        type: boolean


jobs:
  build_and_test_triton_shared:
    runs-on: ubuntu-latest

    steps:
    - name: Force Failure
      if: ${{ inputs.force-failure }}
      run: exit 1

    - name: Checkout Triton
      uses: actions/checkout@v4
      with:
        repository: 'openai/triton'
        ref: ${{ inputs.triton-ref }}
        path: triton
        submodules: 'recursive'

    - name: Checkout Triton-Shared
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.triton-shared-ref }}
        path: triton/third_party/triton_shared

    - name: Clear Triton Cache
      run: |
        rm -rf ~/.triton

    - name: Update PATH
      run: |
        echo "PATH=${HOME}/.local/bin:${PATH}" >> "${GITHUB_ENV}"

    - name: Check pre-commit
      run: |
        cd triton
        python3 -m pip install --upgrade pre-commit
        python3 -m pre_commit run --all-files --verbose

    - name: Build/Install Triton
      run: |
        export TRITON_CODEGEN_TRITON_SHARED=1
        cd triton/python
        python3 -m pip install --upgrade pip
        python3 -m pip install cmake==3.24
        python3 -m pip install ninja
        python3 -m pip uninstall -y triton
        python3 setup.py build
        python3 -m pip install --no-build-isolation -vvv '.[tests]'

    - name: Run shared middle-layer lit tests
      run: |
        python3 -m pip install lit
        cd triton/python
        LIT_TEST_DIR="build/$(ls build | grep -i cmake)/third_party/triton_shared/test"
        if [ ! -d "${LIT_TEST_DIR}" ]; then
          echo "Coult not find '${LIT_TEST_DIR}'" ; exit -1
        fi
        lit -v "${LIT_TEST_DIR}"
        
    - name: Report Failure
      if: ${{ inputs.notify-on-failure && failure() }}
      run: |
        issues=$(gh --repo microsoft/triton-shared issue list --label nightly-build-failure --state open)
        build_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        notificiation_list="@microsoft/aifx-compilers"
        repo=microsoft/triton-shared #"${{ github.repository }}"
        if [ -z "$issues" ]; then
          gh --repo $repo issue create  \
              --title "Nightly Build Failure $(date +'%Y-%m-%d')" \
              --label "nightly-build-failure" \
              --body "cc $notificiation_list
                      The nightly build has failed. See: $build_url"
        else
          issue_number=$(echo "$issues" | head -n 1 | awk '{print $1}')
          gh --repo $repo issue comment $issue_number \
              --body "cc $notificiation_list
                      The nightly build has failed again. See: $build_url"
        fi
      env:
        GH_TOKEN: ${{ github.token }}
