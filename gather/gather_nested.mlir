#loc = loc("<ipython-input-5-82e525469728>":48:0)
module {
  tt.func public @gather(%arg0: !tt.ptr<f32> loc("<ipython-input-5-82e525469728>":48:0), %arg1: !tt.ptr<f32> loc("<ipython-input-5-82e525469728>":48:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<4> : tensor<4xi32> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<4xi32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<4xi32> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %0 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32> loc(#loc2)
    %1 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>> loc(#loc3)
    %2 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>> loc(#loc4)
    %3:2 = scf.for %arg2 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg3 = %0, %arg4 = %0) -> (tensor<4xi32>, tensor<4xi32>)  : i32 {
      %4 = arith.divsi %arg3, %cst_1 : tensor<4xi32> loc(#loc6)
      %5 = tt.splat %arg2 : i32 -> tensor<4xi32> loc(#loc7)
      %6 = arith.addi %4, %5 : tensor<4xi32> loc(#loc7)
      %7 = arith.cmpi slt, %6, %cst_0 : tensor<4xi32> loc(#loc8)
      %8 = tt.addptr %1, %6 : tensor<4x!tt.ptr<f32>>, tensor<4xi32> loc(#loc3)
      %9 = tt.load %8, %7 : tensor<4x!tt.ptr<f32>> loc(#loc9)
      %10 = tt.addptr %2, %6 : tensor<4x!tt.ptr<f32>>, tensor<4xi32> loc(#loc4)
      tt.store %10, %9 : tensor<4x!tt.ptr<f32>> loc(#loc10)
      %11 = arith.addi %6, %cst : tensor<4xi32> loc(#loc11)
      %12 = arith.addi %arg4, %cst : tensor<4xi32> loc(#loc12)
      %13 = arith.addi %arg2, %c1_i32 : i32 loc(#loc13)
      %14:2 = scf.for %arg5 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg6 = %11, %arg7 = %12) -> (tensor<4xi32>, tensor<4xi32>)  : i32 {
        %23 = arith.addi %arg5, %c1_i32 : i32 loc(#loc15)
        %24 = arith.muli %13, %23 : i32 loc(#loc16)
        %25 = tt.splat %24 : i32 -> tensor<4xi32> loc(#loc17)
        %26 = arith.divsi %arg6, %25 : tensor<4xi32> loc(#loc17)
        %27 = arith.addi %26, %5 : tensor<4xi32> loc(#loc18)
        %28 = arith.cmpi slt, %27, %cst_0 : tensor<4xi32> loc(#loc19)
        %29 = tt.addptr %1, %27 : tensor<4x!tt.ptr<f32>>, tensor<4xi32> loc(#loc20)
        %30 = tt.load %29, %28 : tensor<4x!tt.ptr<f32>> loc(#loc21)
        %31 = tt.addptr %2, %27 : tensor<4x!tt.ptr<f32>>, tensor<4xi32> loc(#loc22)
        tt.store %31, %30 : tensor<4x!tt.ptr<f32>> loc(#loc23)
        %32 = arith.addi %27, %cst : tensor<4xi32> loc(#loc24)
        %33 = arith.addi %arg7, %cst : tensor<4xi32> loc(#loc25)
        scf.yield %32, %33 : tensor<4xi32>, tensor<4xi32> loc(#loc26)
      } loc(#loc14)
      %15 = arith.divsi %14#0, %cst_1 : tensor<4xi32> loc(#loc27)
      %16 = arith.addi %15, %5 : tensor<4xi32> loc(#loc28)
      %17 = arith.cmpi slt, %16, %cst_0 : tensor<4xi32> loc(#loc29)
      %18 = tt.addptr %1, %16 : tensor<4x!tt.ptr<f32>>, tensor<4xi32> loc(#loc30)
      %19 = tt.load %18, %17 : tensor<4x!tt.ptr<f32>> loc(#loc31)
      %20 = tt.addptr %2, %16 : tensor<4x!tt.ptr<f32>>, tensor<4xi32> loc(#loc32)
      tt.store %20, %19 : tensor<4x!tt.ptr<f32>> loc(#loc33)
      %21 = arith.addi %16, %cst : tensor<4xi32> loc(#loc34)
      %22 = arith.addi %14#1, %cst : tensor<4xi32> loc(#loc35)
      scf.yield %21, %22 : tensor<4xi32>, tensor<4xi32> loc(#loc36)
    } loc(#loc5)
    tt.return loc(#loc37)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("<ipython-input-5-82e525469728>":49:24)
#loc3 = loc("<ipython-input-5-82e525469728>":55:26)
#loc4 = loc("<ipython-input-5-82e525469728>":56:24)
#loc5 = loc("<ipython-input-5-82e525469728>":51:22)
#loc6 = loc("<ipython-input-5-82e525469728>":53:23)
#loc7 = loc("<ipython-input-5-82e525469728>":53:27)
#loc8 = loc("<ipython-input-5-82e525469728>":54:22)
#loc9 = loc("<ipython-input-5-82e525469728>":55:20)
#loc10 = loc("<ipython-input-5-82e525469728>":56:30)
#loc11 = loc("<ipython-input-5-82e525469728>":57:16)
#loc12 = loc("<ipython-input-5-82e525469728>":58:20)
#loc13 = loc("<ipython-input-5-82e525469728>":61:33)
#loc14 = loc("<ipython-input-5-82e525469728>":60:26)
#loc15 = loc("<ipython-input-5-82e525469728>":61:43)
#loc16 = loc("<ipython-input-5-82e525469728>":61:39)
#loc17 = loc("<ipython-input-5-82e525469728>":61:28)
#loc18 = loc("<ipython-input-5-82e525469728>":61:49)
#loc19 = loc("<ipython-input-5-82e525469728>":62:26)
#loc20 = loc("<ipython-input-5-82e525469728>":63:30)
#loc21 = loc("<ipython-input-5-82e525469728>":63:24)
#loc22 = loc("<ipython-input-5-82e525469728>":64:28)
#loc23 = loc("<ipython-input-5-82e525469728>":64:34)
#loc24 = loc("<ipython-input-5-82e525469728>":65:20)
#loc25 = loc("<ipython-input-5-82e525469728>":66:24)
#loc26 = loc("<ipython-input-5-82e525469728>":66:12)
#loc27 = loc("<ipython-input-5-82e525469728>":69:23)
#loc28 = loc("<ipython-input-5-82e525469728>":69:27)
#loc29 = loc("<ipython-input-5-82e525469728>":70:22)
#loc30 = loc("<ipython-input-5-82e525469728>":71:26)
#loc31 = loc("<ipython-input-5-82e525469728>":71:20)
#loc32 = loc("<ipython-input-5-82e525469728>":72:24)
#loc33 = loc("<ipython-input-5-82e525469728>":72:30)
#loc34 = loc("<ipython-input-5-82e525469728>":73:16)
#loc35 = loc("<ipython-input-5-82e525469728>":74:20)
#loc36 = loc("<ipython-input-5-82e525469728>":74:8)
#loc37 = loc("<ipython-input-5-82e525469728>":51:4)
